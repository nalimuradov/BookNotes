XML
 - extensible markup language
 - data model (alternative to relational model)
 - tags descirbe the content of the data
 - <First_Name>Nariman</First_Name>
 - in html, the tags describe how the content is structured eg.<div>

Nesting
 - <author> tag can have <First_Name> and <Last_Name> in it

Attributes
 - in opening tag
 - <Book Price="80"> </Book>
  	

RELATIONAL VS XML

Structure
 - relational uses tables
 - xml is hierarchical

Schema
 - relational is fixed in advance
 - xml is flexible (self-describing)
 - they are required in relational but optional in xml
 - eg one book has price and id, other book only has price

Queries
 - relational is simple
 - xml not as simple

Ordering
 - relational is unordered
 - in sql we can use ORDER BY, but relational itself has no ordering
 - xml has implied ordering

Implementation
 - relational is native
 - xml is more of an add-on (a layer over the relational database)


Well Formed XML
 - single root element (eg. <Bookstore> is the root)
 - matched tags, proper nesting (eg. open tags without closed tags)
 - unique attributes within elements 

XML Conversion 
 - can send XML document through XML parser to check if it is well-formed
 - if it is, it is now parsed XML document
 - can then send through a CSS interpreter to translate to HTML


Document Type Descriptor (DTD)
 - grammar-like language for specifying elements, attributes, ordering, nesting, etc

Benefits of using DTD/XSD
 - programs can assume structure since it was run through a validator
 - easier to document and specify

Benefits of not using DTD/XSD
 - flexibility (makes XML conform to a specification)
 - DTD's can be messy

ID and IDref Attributes
 - instead of author being subsection of book
 - we can have author point to book
 - <Author Ident="JW">
 - <Book ISBN=..... Authors="HG JW JW">
 - author has certain ID and book has that same ID as one of the authors


XML Schema (XSD)
 - same task as DTD, creates structure of XML
 - uses XML itself