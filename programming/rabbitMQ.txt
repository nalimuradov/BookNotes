RabbitMQ

message broker:
 - accepts and forwards messages
 - accepts, stores, forwards binary blobs of data (messages)
 
producer:
 - a program that sends messages
 - represent as blue circle with P in it

queue:
 - name for the post box which lives inside RabbitMQ
 - messages flow thru RabbitMQ but can be only stored inside a queue
 - a large message buffer
 - many producers can send messages that go into one queue
 - many consumers can receive data from one queue
 - represent as red bar

consumer:
 - a program that mostly waits to receive messages
 - represent as blue circle with C in it
 - an application can be both a producer and consumer

exchange:
 - message must go to exchange before going to queue
 - allows us to specify exactly to which queue the message should go to
 - represent as dark blue circle with X in it

listing queues:
 - rabbitmqctl.bat list_queues

work queue:
 - used to distribute time-consuming tasks among multiple workers
 - useful to avoid doing a resource-intensive task immediately and having to wait for it to complete
 - schedule task to be done later

message acknowledgement:
 - want to know if a worker processed a message
 	- scenario where a worker gets a message but is deleted while processing it
 - can send an ACK that states if message has been received, processed, and is free to be deleted
 - with ACK, rabbitMQ can redirect the task to another consumer for processing

durable queue:
 - a queue that won't be lost even if RabbitMQ restarts

fair dispatch:
 - rather than alternating who it gives its tasks to, it will find a worker that is not busy
	- useful for when every other task is heavy in which case one worker will get much more work than the other
 - channel.basic_qos(prefetch_count=1)

persistent messages:
 - make messsages also not get lost on restart
 - delivery_mode = 2

publish/subscribe:
 - deliver a message to multiple consumers

fanout:
 - specify as exchange type
 - will send message to all queues, therefore routing key isn't useful here

binding:
 - relationship between queue and exchange
 - channel.queue_bind(..)

direct exchange:
 - as opposed to fanout, we can use keys to route messages
 - a message will go the queues whose 'binding key' exactly matches the 'routing key' of the message

topic exchange:
 - messages sent to a topic exchange can't have an arbitrary routing key
 - must be a list of words delimited by dots
 - similar to a direct exchange, however:
	- * can substitute for exactly one word
	- # can substitute for zero or more words
 - eg. *.orange.*, *.*.rabbit, lazy.#
	- examples of <celerity>.<colour>.<species>
	- so if we expect input to be these 3, we can do regex-like operations to filter based on multiple criteria
	- good way to put it, Q1 is interested in all orange animals, Q2 interested in all rabbits and interested in anything lazy
 - when queue is bound with just a #, will behave like a fanout and will receive all messages
 - when queue isn't bound with either a * or #, will behave just like a direct exchange

 - some examples when entering into cmd:
	- python receive_logs_topic.py "kern.*"
	- python receive_logs_topic.py "*.critical"
	- python receive_logs_topic.py "kern.*" "*.critical"

remote procedure call (RPC):
 - a pattern used to run a function on a remote computer and wait for result
 - client sends a request containing things:
	- "reply_to" which is set to the callback queue
	- "correlation_id" which is set to a unique val for every request
 - request sent to rpc queue
 - server (rpc worker) waits for requests on that queue
 - once finished, it sends message back to client to the queue specified in "reply_to"
 - client waits for data on callback queue, checks "correlation_id" and if it matches, return the response

fibonacci example:
 - will calculate fib(30) and send response back
 - if one server busy, a second one can take the task