HASKELL NOTES

1 - Introduction ########################################################################

purely functional programming language:
 - you don't tell it what to do like in imperative languages
 - rather you tell it "what stuff is"

haskell is lazy:
 - will wait till last possible moment to compute
 - doubleMe(doubleMe(doubleMe(list)))

haskell is statically typed:
 - compiler knows ahead of time what is an int and what is a string
 - also has type inference (no need to write 'int' as it will already know)

2 - Starting Out ########################################################################

to run:
 - open terminal and type 'ghci'
 - can add numbers n shit
 - :quit to quit
 
negative numbers:
 - must put brackets around them or compiler will complain
 - eg. 3*-15 won't work but 3*(-15) will

booleans:
 - True && False, True || False, etc.

functions:
 - eg. * (multiplication) is a function, takes two numbers and multiplies them
 	- this is an infix function (sandwiched between them)
 - typically written as 'funcname param1 param2...'
 	- eg. succ 8 will return 9 (successor of 8)
 - other examples:
	- min 5 6 -> 5
	- max 5 6 -> 6
	- div 92 10 -> 9
 - key to remember is that bar (bar 3) doesn't mean we're calling bar with bar 3 as a param
	- we are calling bar with 3 and then we call bar on the result of that number
	- in Python would be bar(bar(3))

my own function:
 - doubleMe x = x + x
	- will take num and double it
 - navigate to the dir, enter ghci, then enter :l hask to load module
 - now we can use the function
	- doubleMe 5 returns 10
	- can have functions call others (doubleUs uses doubleMe)

haskell upsides:
 - order doesn't matter
	- doubleUs can be before doubleMe won't matter
 - follows common pattern of simple functions being combined to make more complicated ones
	- doubleMe doubleUs example
 - can use 'let' to define a name right in ghci
	- let a = 1 is like making a script with a = 1 and then loading it
	- useful for lists: let myList = [....]

conditionals:
 - doubleSmallNumber x = if x > 100 then x else x*2
 - in Haskell, 'else' is mandatory, something must be returned in each case
 - can add 1 to doubleSmall Number's output:
	- doubleSmallNumber' x = (if x > 100 then x else x*2) + 1
	- added ' here as it's a modified version of the function, and valid

noteworthy function notes:
 - can't start with capital letter
 - doesn't have to take any params
	- if it doesn't, it's called a 'definition' or a 'name'
	- cannot be changed anymore, sort of like a str const now

lists:
 - myList = [4, 5, 6, 1]
 - [1, 2, 3] ++ [1, 1] -> [1, 2, 3, 1, 1]
 - strings are lists of characters:
	- "hello" ++ " " ++ "world" -> "hello world"
	- ['w', 'o'] ++ ['w'] = 'wow'
 - append to beginning:
	- 5:[1,2,3,4] -> [5,1,2,3,4]
	- 'a':" small cat" -> "a small cat"
	- useful for when dealing with long lists as appending to beginning is instant, not to end tho
	- essentially [1,2,3] is the same as 1:2:3:[]
 - [] is an empty list, [[]] is a list which has an empty list, [[],[],[]] is a list with 3 empty lists
	- these are not the same things
 - get value at index:
	- use !!
	- eg. "Nariman" !! 5 -> 'a'
	- nested lists: [[5]] !! 0 !! 0 -> 5
 - all items must be same type
 - can compare lists: [3, 2, 1] > [3, 2, 0] -> True
 - other useful list functions:
	- 'head' returns first element
	- 'tail' returns all but first element
	- 'last' returns last element
	- 'init' returns all but last element
		- these can't be used on empty lists
	- 'length' returns length
	- 'null' returns if empty
	- 'reverse' reverses the list
	- 'take' takes x numbers from list y 
		- eg. take 3 [1, 2] will take first 3 elements, all if there aren't enough
	- 'drop' same as take but drops them
	- 'maximum' returns highest value
	- 'minimum' returns lowest value
	- 'sum' returns sum of all indices
	- 'product' returns product of all indices
	- 'elem' checks to see if x is in list y
		- eg. 4 'elem' [3, 4, 5, 6] -> True

ranges:
 - [1..20]
 - like range in python, gives list of numbers in that range
 - ['K'..'Z']
 - can specify a step too:
	- [2, 4..20] -> [2, 4, 6, ... 20]
 - to go backwards:
	- [20, 19..1]
	- must specify step distance even if it's by 1
 - infinite ranges:
	- [13, 26..]
	- haskell only computes what it needs to
	- say we need first 24 multiples of 13:
		- take 24 [13,26..]

cycle:
 - takes a list and cycles it into an infinite one
	- take 10 (cycle [1,2,3]) -> [1,2,3,1,2,3,1,2,3,1]

repeat: 
 - takes an element and repeats it into an infinite list
	- take 10 (repeat 5) -> [5,5,5,5,5,5,5,5,5,5]
 - can just use 'replicate' function though
	- replicate 3 10 -> [10,10,10]

list comprehension:
 - like a set S = {2x | x E N, x <= 10}
 - [x*2 | x <- [1..10]]
 	- can be expanded for other conditions
	- eg. [x*2 | x <- [1..10], x*2 >= 12]
	- this weeding out of the list by predicates is called 'filtering'
 - can have conditional in it:
	- eg. [if x < 10 then "BOOM" else "BANG" | x <- [1, 2, 12]]
 - can also draw from several lists:
	- [x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]

 - length' xs = sum[1 | _ <- xs]
	- our own length function
	- _ means that we don't care what we draw from the list
	- better than instantiating a var we'll never use again

tuples:
 - like lists but more strict
	- used when we know exactly how many values and its types
 - can also contain many types, not just one
 - a tuple of size 2 is its own type
	- cannot have a list with a 2-tuple and then a 3-tuple

 - useful functions:
	- fst (8,11) -> 8
	- lst (8,11) -> 11
	- zip [1,2,3] [5,5,5] -> [(1,5), (2,5), (3,5)]
		- if one list is longer, remaning values get cut off

triangle example:
 - find all right triangles where all sides are ints less than 10 and perimeter is 24
 - let triangles = [(a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10]]
	- this will give us all triples with vals 1 to 10 for each a,b,c
 - let rightTriangles = [(a,b,c) | c <- [1..10]. b <- [1..10], a <- [1..10], a^2 + b^2 == c^2]
	- this will give us all combinations of right triangles
 - let ans = [(a,b,c) | c <- [1..10]. b <- [1..10], a <- [1..10], a^2 + b^2 == c^2, a+b+c == 24]
	- final answer: (6,8,10)
 - this kind of 'breaking down' solution is very common in functional programming

3 - Types and Typeclasses ########################################################################

check type of a value:
 - :t 'a' will say that it's a char
 	- 'a' :: Char
	- the :: means 'is type of'
 - :t "HELLO" will return a list of char, because that's what strings are

function types:
 - functions also have types
 - removeNonUppercase :: [Char] -> [Char]
	- means that it maps from a String to a String
 	- same as removeNonUppercase :: String -> String

type variables:
 - eg. head :: [a] -> a	
	- what is this 'a'?
	- used to denote a generic 
 - eg. fst :: (a, b) -> a
 	- can see this with :t fst
	- we see that fst takes a tuple which has two types and returns an element of same type as first component	
	- a and b don't necessarily have to be different

typeclasses:
 - similar to interfaces in Java
 - run :t (==) will print:
	- (==) :: (Eq a) => a -> a -> Bool
 - everything before the => is called the class constraint
 	- what it is saying is that it takes any two values of same type and returns a Bool
	- the type of those two values must be a member of the Eq class (the class constraint)
 - the Eq typeclass provides an interace for testing for equality
	- eg. 5 == 5, 5 /= 5
 - Ord is a typeclass for types that have an ordering
	- must first be Eq before it can be Ord 
 - Show is a typeclass for types that can be represented as Strings
 - Read is a typeclass for types that can be read (opposite of Show, converts back)
	- sometimes it won't know which type to turn it into
	- can explicitly show with read "5" :: Int
 - Enum is a typeclass for types that can be enumerated (like have ranges)
 - Bounded is a typeclass for types that have an upper and a lower bound
 - others include: Num, Integral, Floating

4 - Syntax in Functions ########################################################################

pattern matching:
 - can have some functions for certain parameter patterns
 - eg. lucky 7 = "nice you picked seven"
       lucky x = "you didn't pick seven"
 - x is every other condition (every number other than 7)
 	- this 'x' is the catch-all
	- if we put it first, it would always catch as the others never get a chance to be reached
 - must include a catch-all or it will fail if one of the options is not selected

factorial example:
 - this way we can define factorial function recursively
 - factorial :: (Integral a) => a -> a
   factorial 0 = 1
   factorial n = n * factorial (n - 1)
 - will recursively calculate the factorial of whatever input

adding vectors example:
 - addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)
 - addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

list pattern matching:
 - x:y:z:zs will bind the first three elements to variables and the rest of the list another var
	- as such it will match only against lists that have 3+ elements
 - eg. head' (x:_) = x
	- head "Hello" -> 'H'

length pattern matching example:
 - length' :: (Num b) => [a] -> b
 - length' [] = 0
 - length' (_:xs) = 1 + length' xs

patterns:
 - put an @ in front of the pattern
 - eg. @(x:xs)
	- capital all@(x:xs) -> First letter of Dark is D

guards:
 - a way of testing wheter some property of a value is true or false
 - bmiTell :: (RealFloat a) => a -> a -> String
 - bmiTell weight height
	| weight/height ^2 < = 18.5 = "Underweight"	
	| weight/height ^2 < = 24.5 = "Normal Weight"
	| weight/height ^2 < = 30.5 = "Overweight"
	| otherwise	            = "XXL"
	where bmi = weight/height ^ 2
		- replace above calcs with bmi to save time

list of pairs example:
	- calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
	- calcBmis xs = [bmi w h | (w, h) <- xs]  
    	     - where bmi weight height = weight / height ^ 2  

let bindings:
 - cylinder :: (RealFloat a) => a -> a -> a
 - cylinder r h =
	let sideArea = 2 * pi * r * h
	    topArea = pi * r ^ 2
	in  sideArea + 2 * topArea
 - basic form is let <bindings> in <expression>
 - let bindings are 'expressions' themselves
	- where bindings are just syntactic constructs
 - can also use to introduce functions in a local scope
	- [let square x = x * x in (square 5, square 3, square 2)]

case expressions:
 - case expression of pattern -> result
		      pattern -> result
		      pattern -> result
		      ...
 - useful for pattern matching against something in the middle of an expression

5 - Recursion ########################################################################

recursion:
 - imperative because functional languages declare WHAT SOMETHING IS, not HOW YOU GET IT
 - that's why there are no loops
 - as such, recursion is much more imperative in functional languages

elem example:
 - elem' :: (Eq a) => a -> [a] -> Bool  
 - elem' a [] = False  
 - elem' a (x:xs)  
    - | a == x    = True  
    - | otherwise = a `elem'` xs   

quicksort:
 - quicksort recursion example is goat in functional languages

6 - Higher Order Functions ########################################################################

curried functions:
 - officially every haskell function only takes one param