REST:
 - representational state transfer
 - a set of design constraints (rules) that help bring efficient and scalable systems
 - have methods (get, delete) that return a resource (like http or xml)
 - rather than rendering each page individually (requires a new html file to render from)
	- we use URI's to get the next state of certain parts only

API:
 - application programming interface
 - a set of rules inside a program that allow it to communicate with other programs or hardware
 - twitter API can be used to pull data from twitter into java for example
 - REST is the librarian and API is the language you use to talk to them (librarian, please GET xyz)


URL vs URI:
 - universal resource locator (URL) is 
 - universal resource identifier (URI)
 - URL is a subset of URI
	- eg. https://nalimuradov.com is a URL, https://nalimuradov.com#posts is a URI
	- URL will also show you how to access that resource, like http or ftp

constraints of REST:
 - client server architecture
 	- ensures proper separation of concerns 
	- client manages UI concers, server manages data storage concerns
	- this way, we can have one REST service serve many clients
 - statelessness
 	- no context information can be stored on the server between requests
	- the client is responsible for tracking current state
	- the server doesn't care, just returns the state you want
 - cacheability
	- all REST responses must be either marked as cacheable or not cacheable
 - layered system
	- system should be designed so client shouldn't care whether it's connected directly to server or CDN
	- everything should be abstracted away

serializing:
 - means to convert object to a byte stream so that it can be reverted in the future
 - eg. java object serialized to json file

deserializing:
 - the reverse, where we revert back to the object using the byte stream
 - eg. json file -> java object

parsing:
 - process of analyzing a string of symbols (eg. natural lang, prog lang) conforming to rules of grammar
 - eg. read some text -> find useful info based off the rules 
 - parsing = processing text

marshall:
 - process of transforming memory representation of an object to a data format suitable for storage/transfer
 - used when data must be moved from one program to another

##################

REST:
 - representational state transfer
 - defined by six rules:
	- client server (separation between client that offers service, and user that consumes it)
	- stateless (each request from client must contain all information required to carry it out)
		- cannot store information from client and use it in another request
	- cacheable (server must indicate to client if requests can be cached or not)
	- layered system (communication between client and server should be standardized)
	- uniform interface (method of communication must be uniform)
	- code on demand (servers can provide code for clients to execute)

 - was originally designed to fit HTTP protocol
 - central concept of REST is the notion of resources
	- resources are represented by URIs
	- client sends requests to these URIs 

 - typical HTTP request methods:
	- GET (eg. http://example.com/api/orders -> will retrieve order list)
	- POST (eg. http://example.com/api/orders -> will create new order from data in request)
	- PUT (eg. http://example.com/api/orders/123 -> will update order #123)
	- DELETE (eg. http://example.com/api/orders/123 -> will delete order #123)

 - REST does not require a specific format, but JSON is often used

designing a simple web service (REST API):
 - say we want to write a todo list:
	- we can use http://[hostname]/todo/api/v1.0/ as the root URL
 - next we have to decide what resources will be exposed by this service:
	- GET, POST, PUT, DELETE
	- we will need the following:
		- GET http://[hostname]/todo/api/v1.0/tasks -> will retrieve the list of tasks
		- GET http://[hostname]/todo/api/v1.0/tasks/[task_id] -> will retrieve the task
		- POST http://[hostname]/todo/api/v1.0/tasks -> will create a new task
		- PUT http://[hostname]/todo/api/v1.0/tasks/[task_id] -> will update an existing task
		- DELETE http://[hostname]/todo/api/v1.0/tasks/[task_id] -> will delete a task

 - our todo list will consist of tasks which will have:
	- id: unique id for tasks (numeric)
	- title: short description (string)
	- description: full description (string)
	- done: completion state (bool)

 - and with this we are done designing the web service, we must now implement it

creating the RESTful service:
 - first we host a flask application (simple enough, done before)
 - 