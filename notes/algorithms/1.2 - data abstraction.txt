1.2 - Data Abstraction

data types:
 - a set of values and a set of operations on those values

abstract data types:
 - a data type whose internal representation is hidden from the client

objects:
 - an entity that can  take on a data-type value
 - three properties:
	- state: (value from its data type)
	- identity: (distinguishes one object from another)
	- behaviour: (effect of data type operations)

API:
 - a list of constructors and instance methods with a description of each one		
 - eg. public class Counter
		    Counter(String id)		create a counter named id
	       void increment()			increment counter by one
	        int tally() 			number of increments since creation
	     String toString()			string representation

using abstract data types:
 - create object: Counter heads = new Counter("heads");
 - invoke instance methods: heads.tally() - tails.tally();
	- tally() is the instance method here

 - examples of ADT's:
	- Point2D.java
	- Interval1D.java
	- Interval2D.java
	- Date.java
	- Java's String data type is also an ADT
 
object aliasing:
 - Counter c2 = c1;
	- both c2 and c1 will refer to the same object

objects:
 - can pass objects as arguments
 - can have objects as return values
 - arrays are objects
 - can have array of objects

immutability:
 - an immutable objects value cannot be changed once constructued
 - eg. Strings are immutable in java

assertions:
 - assert index >= 0;
 - can use in our code to verify assumptions 
	- if it is false, will terminate the program